import tkinter as tk
from tkinter import ttk, messagebox
import pickle
from datetime import datetime, timezone
import re
import csv



# Utility functions for pickle file handling
def save_data(filename, data):
    try:
        with open(filename, "wb") as file:
            pickle.dump(data, file)
    except Exception as e:
        print(f"Error saving data: {e}")


def load_data(filename):
    try:
        with open(filename, "rb") as file:
            return pickle.load(file)
    except FileNotFoundError:
        return []
    except Exception as e:
        print(f"Error loading data: {e}")
        return []


class TicketingSystemApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Ticketing System")
        self.root.geometry("1000x700")

        # Date and Time
        self.current_time = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S")

        # Add current date/time and user login display
        self.header_frame = tk.Frame(self.root)
        self.header_frame.pack(fill="x", padx=5, pady=5)

        tk.Label(self.header_frame, text=f"Current Date and Time: {self.current_time}").pack(anchor="w")

        # Create notebook for tabs
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(expand=True, fill="both")

        # Initialize tabs
        self.account_management_tab = tk.Frame(self.notebook)
        self.ticket_purchasing_tab = tk.Frame(self.notebook)
        self.admin_dashboard_tab = tk.Frame(self.notebook)

        self.notebook.add(self.account_management_tab, text="Account Management")
        self.notebook.add(self.ticket_purchasing_tab, text="Ticket Purchasing")
        self.notebook.add(self.admin_dashboard_tab, text="Admin Dashboard")

        # Initialize tab contents
        self.init_account_management()
        self.init_ticket_purchasing()
        self.init_admin_dashboard()

    def init_account_management(self):
        # Title
        title_frame = tk.Frame(self.account_management_tab)
        title_frame.pack(fill="x", padx=10, pady=5)
        tk.Label(title_frame, text="Account Management", font=("Arial", 20, "bold")).pack()

        # Form Frame
        form_frame = tk.Frame(self.account_management_tab)
        form_frame.pack(padx=10, pady=5)

        # Labels and Entries with consistent spacing
        labels = ["User ID:", "Name:", "Email:", "Password:", "Phone Number:"]
        self.account_entries = {}

        for i, label in enumerate(labels):
            tk.Label(form_frame, text=label, anchor="e").grid(row=i, column=0, padx=5, pady=5, sticky="e")
            entry = tk.Entry(form_frame)
            entry.grid(row=i, column=1, padx=5, pady=5, sticky="ew")
            self.account_entries[label.lower().replace(":", "").replace(" ", "_")] = entry

        # Show/Hide password button
        self.password_shown = False
        self.show_password_btn = tk.Button(form_frame, text="Show", command=self.toggle_password)
        self.show_password_btn.grid(row=3, column=2, padx=5)

        # Buttons Frame
        btn_frame = tk.Frame(self.account_management_tab)
        btn_frame.pack(pady=10)

        buttons = [
            ("Add Customer", self.add_customer),
            ("Modify Customer", self.modify_customer),
            ("Delete Customer", self.delete_customer),
            ("View Customers", self.view_customers),
            ("Clear Fields", self.clear_fields)
        ]

        for i, (text, command) in enumerate(buttons):
            tk.Button(btn_frame, text=text, command=command, width=15).grid(row=0, column=i, padx=5)

        # Display Area
        self.display_area = tk.Text(self.account_management_tab, height=15, width=80)
        self.display_area.pack(padx=10, pady=5)

    def toggle_password(self):
        entry = self.account_entries["password"]
        if self.password_shown:
            entry.configure(show="*")
            self.show_password_btn.configure(text="Show")
        else:
            entry.configure(show="")
            self.show_password_btn.configure(text="Hide")
        self.password_shown = not self.password_shown

    def clear_fields(self):
        for entry in self.account_entries.values():
            entry.delete(0, tk.END)

    def validate_inputs(self):
        user_id = self.account_entries["user_id"].get()
        name = self.account_entries["name"].get()
        email = self.account_entries["email"].get()
        phone = self.account_entries["phone_number"].get()

        if not all([user_id, name, email, phone]):
            messagebox.showerror("Error", "All fields are required!")
            return False

        if not user_id.isdigit():
            messagebox.showerror("Error", "User ID must contain only numbers!")
            return False

        if not name.replace(" ", "").isalpha():
            messagebox.showerror("Error", "Name must contain only letters!")
            return False

        if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
            messagebox.showerror("Error", "Invalid email format!")
            return False

        if not phone.isdigit() or len(phone) != 10:
            messagebox.showerror("Error", "Phone number must be 10 digits!")
            return False

        return True

    def add_customer(self):
        if not self.validate_inputs():
            return

        customer_data = {
            "user_id": self.account_entries["user_id"].get(),
            "name": self.account_entries["name"].get(),
            "email": self.account_entries["email"].get(),
            "password": self.account_entries["password"].get(),
            "phone": self.account_entries["phone_number"].get()
        }

        customers = load_data("customers.pkl")

        # Check if user_id already exists
        if any(c["user_id"] == customer_data["user_id"] for c in customers):
            messagebox.showerror("Error", "User ID already exists!")
            return

        customers.append(customer_data)
        save_data("customers.pkl", customers)
        messagebox.showinfo("Success", "Customer added successfully!")
        self.clear_fields()
        self.view_customers()

    def modify_customer(self):
        if not self.validate_inputs():
            return

        user_id = self.account_entries["user_id"].get()
        customers = load_data("customers.pkl")

        for i, customer in enumerate(customers):
            if customer["user_id"] == user_id:
                customers[i] = {
                    "user_id": user_id,
                    "name": self.account_entries["name"].get(),
                    "email": self.account_entries["email"].get(),
                    "password": self.account_entries["password"].get(),
                    "phone": self.account_entries["phone_number"].get()
                }
                save_data("customers.pkl", customers)
                messagebox.showinfo("Success", "Customer modified successfully!")
                self.clear_fields()
                self.view_customers()
                return

        messagebox.showerror("Error", "Customer not found!")

    def delete_customer(self):
        user_id = self.account_entries["user_id"].get()
        if not user_id:
            messagebox.showerror("Error", "Please enter a User ID!")
            return

        customers = load_data("customers.pkl")
        original_length = len(customers)
        customers = [c for c in customers if c["user_id"] != user_id]

        if len(customers) == original_length:
            messagebox.showerror("Error", "Customer not found!")
            return

        save_data("customers.pkl", customers)
        messagebox.showinfo("Success", "Customer deleted successfully!")
        self.clear_fields()
        self.view_customers()

    def view_customers(self):
        self.display_area.delete(1.0, tk.END)
        customers = load_data("customers.pkl")

        if not customers:
            self.display_area.insert(tk.END, "No customers found.")
            return

        header = f"{'User ID':<10} {'Name':<20} {'Email':<30} {'Phone':<15}\n"
        self.display_area.insert(tk.END, header)
        self.display_area.insert(tk.END, "-" * 75 + "\n")

        for customer in customers:
            line = f"{customer['user_id']:<10} {customer['name']:<20} {customer['email']:<30} {customer['phone']:<15}\n"
            self.display_area.insert(tk.END, line)

    def init_ticket_purchasing(self):
        # Main container for the tab
        self.ticket_selection_frame = tk.Frame(self.ticket_purchasing_tab)
        self.payment_frame = tk.Frame(self.ticket_purchasing_tab)

        self.ticket_selection_frame.pack(fill="both", expand=True)

        # ---- Step 1: Ticket Selection ----
        tk.Label(self.ticket_selection_frame, text="Ticket Purchasing", font=("Arial", 20, "bold")).pack(pady=10)

        self.ticket_info = {
            "Single Race": {"price": 100, "validity": "1 day", "features": "Access to single race"},
            "Weekend Pass": {"price": 250, "validity": "3 days", "features": "Full weekend access"},
            "Group Discount": {"price": 400, "validity": "1 day", "features": "4-person group pass"}
        }

        self.ticket_quantities = {}
        info_frame = tk.Frame(self.ticket_selection_frame)
        info_frame.pack(padx=10, pady=5)

        row = 0
        for ticket_type, details in self.ticket_info.items():
            tk.Label(info_frame,
                     text=f"{ticket_type} - ${details['price']} ({details['validity']}): {details['features']}").grid(
                row=row, column=0, sticky="w")
            qty_entry = tk.Entry(info_frame, width=5)
            qty_entry.insert(0, "0")
            qty_entry.grid(row=row, column=1, padx=5)
            qty_entry.bind("<KeyRelease>", lambda e: self.calculate_total())
            self.ticket_quantities[ticket_type] = qty_entry
            row += 1

        total_frame = tk.Frame(self.ticket_selection_frame)
        total_frame.pack(pady=10)
        tk.Label(total_frame, text="Total Price:").pack(side="left")
        self.total_price_label = tk.Label(total_frame, text="$0.00")
        self.total_price_label.pack(side="left")

        tk.Button(self.ticket_selection_frame, text="Checkout", command=self.go_to_payment).pack(pady=10)

        # ---- Step 2: Payment Method (Initially Hidden) ----
        tk.Label(self.payment_frame, text="Payment Method", font=("Arial", 20, "bold")).pack(pady=10)

        form = tk.Frame(self.payment_frame)
        form.pack(pady=10)

        tk.Label(form, text="Cardholder Name:").grid(row=0, column=0, padx=5, pady=5)
        self.card_name_entry = tk.Entry(form)
        self.card_name_entry.grid(row=0, column=1, padx=5, pady=5)

        tk.Label(form, text="Card Number (16 digits):").grid(row=1, column=0, padx=5, pady=5)
        self.card_entry = tk.Entry(form)
        self.card_entry.grid(row=1, column=1, padx=5, pady=5)

        tk.Label(form, text="Payment Method:").grid(row=2, column=0, padx=5, pady=5)
        self.payment_method = ttk.Combobox(form, values=["Credit Card", "Debit Card"])
        self.payment_method.grid(row=2, column=1, padx=5, pady=5)

        tk.Button(self.payment_frame, text="Confirm Purchase", command=self.confirm_purchase).pack(pady=10)

    def calculate_total(self):
        total = 0
        for ticket_type, qty_entry in self.ticket_quantities.items():
            try:
                qty = int(qty_entry.get())
                price = self.ticket_info[ticket_type]["price"]
                total += qty * price
            except ValueError:
                continue
        self.total_price_label.config(text=f"${total:.2f}")

    def go_to_payment(self):
        total = self.total_price_label.cget("text")
        if total == "$0.00":
            messagebox.showerror("Error", "Please select at least one ticket.")
            return

        self.ticket_selection_frame.pack_forget()
        self.payment_frame.pack(fill="both", expand=True)

    def confirm_purchase(self):
        total_text = self.total_price_label.cget("text")
        if total_text == "$0.00":
            messagebox.showerror("Error", "No tickets selected.")
            return

        name = self.card_name_entry.get().strip()
        card = self.card_entry.get().strip()
        method = self.payment_method.get()

        if not all([name, card, method]):
            messagebox.showerror("Error", "All payment fields are required.")
            return

        if not card.isdigit() or len(card) != 16:
            messagebox.showerror("Error", "Card number must be 16 digits.")
            return

        try:
            orders = load_data("orders.pkl")
            ticket_summary = {t: int(e.get()) for t, e in self.ticket_quantities.items() if int(e.get()) > 0}
            total_price = float(total_text.replace("$", ""))

            orders.append({
                "tickets": ticket_summary,
                "total_price": total_price,
                "date": datetime.now(),
                "card_number": card,
                "cardholder": name,
                "payment_method": method
            })

            save_data("orders.pkl", orders)
            messagebox.showinfo("Success", f"Purchase confirmed. Total: ${total_price:.2f}")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to confirm purchase: {e}")

    def init_admin_dashboard(self):
        # Title
        title_frame = tk.Frame(self.admin_dashboard_tab)
        title_frame.pack(fill="x", padx=10, pady=5)
        tk.Label(title_frame, text="Admin Dashboard", font=("Arial", 20, "bold")).pack()

        # Ticket Sales Overview
        sales_frame = tk.Frame(self.admin_dashboard_tab)
        sales_frame.pack(padx=10, pady=5)

        tk.Label(sales_frame, text="Ticket Sales Overview").pack()
        self.sales_table = ttk.Treeview(sales_frame, columns=("Date", "Tickets Sold"), show="headings")
        self.sales_table.heading("Date", text="Date")
        self.sales_table.heading("Tickets Sold", text="Tickets Sold")
        self.sales_table.pack()

        # Summary and Popular Ticket Labels
        self.summary_label = tk.Label(self.admin_dashboard_tab, font=("Arial", 12, "bold"))
        self.summary_label.pack(pady=(5, 0))
        self.popular_label = tk.Label(self.admin_dashboard_tab, font=("Arial", 12))
        self.popular_label.pack()

        self.current_discount_label = tk.Label(self.admin_dashboard_tab, font=("Arial", 11))
        self.current_discount_label.pack(pady=(5, 0))

        # Modify Discounts
        discount_frame = tk.Frame(self.admin_dashboard_tab)
        discount_frame.pack(padx=10, pady=5)

        tk.Label(discount_frame, text="Modify Discounts").pack()
        tk.Label(discount_frame, text="Enter Discount Percentage:").pack()
        self.discount_entry = tk.Entry(discount_frame)
        self.discount_entry.pack()

        (tk.Button(discount_frame, text="Update Discount", command=self.update_discount).pack(pady=10))
        tk.Button(discount_frame, text="Export Sales to CSV", command=self.export_sales).pack(pady=5)

        # Load initial sales data
        self.load_sales_data()

        # Refresh sales data on tab switch
        self.notebook.bind("<<NotebookTabChanged>>", self.on_tab_change)

    def load_sales_data(self):
        from collections import Counter

        # Clear existing data
        for item in self.sales_table.get_children():
            self.sales_table.delete(item)

        orders = load_data("orders.pkl")
        sales_data = {}
        total_tickets = 0
        total_revenue = 0.0
        ticket_counter = Counter()

        for order in orders:
            if "tickets" not in order or not isinstance(order["tickets"], dict):
                continue

            date = order["date"].strftime("%Y-%m-%d")
            qty = sum(order["tickets"].values())
            total_tickets += qty
            total_revenue += order.get("total_price", 0.0)
            ticket_counter.update(order["tickets"])

            if date in sales_data:
                sales_data[date] += qty
            else:
                sales_data[date] = qty

        for date, qty in sales_data.items():
            self.sales_table.insert("", tk.END, values=(date, qty))

        self.summary_label.config(text=f"Total Tickets Sold: {total_tickets}   |   Total Revenue: ${total_revenue:.2f}")

        if ticket_counter:
            top_ticket, count = ticket_counter.most_common(1)[0]
            self.popular_label.config(text=f"Most Popular Ticket: {top_ticket} ({count} sold)")
        else:
            self.popular_label.config(text="Most Popular Ticket: N/A")

        discounts = load_data("discounts.pkl")
        if discounts:
            latest_discount = discounts[-1]["discount"]
            self.current_discount_label.config(text=f"Current Discount: {latest_discount}%")
        else:
            self.current_discount_label.config(text="Current Discount: N/A")

        ticket_breakdown = "Ticket Breakdown: " + ", ".join(f"{t} ({c})" for t, c in ticket_counter.items())
        if hasattr(self, 'breakdown_label'):
            self.breakdown_label.config(text=ticket_breakdown)
        else:
            self.breakdown_label = tk.Label(self.admin_dashboard_tab, text=ticket_breakdown, font=("Arial", 11))
            self.breakdown_label.pack()

    def on_tab_change(self, event):
        selected = event.widget.tab(event.widget.index("current"))["text"]
        if selected == "Admin Dashboard":
            self.load_sales_data()

    def on_tab_change(self, event):
        selected_tab = event.widget.select()
        tab_text = event.widget.tab(selected_tab, "text")

        if tab_text == "Admin Dashboard":
            self.load_sales_data()

    def update_discount(self):
        discount = self.discount_entry.get()
        if not discount.isdigit() or int(discount) > 100 or int(discount) < 0:
            messagebox.showerror("Error", "Enter a valid discount percentage between 0 and 100.")
            return

        discounts = load_data("discounts.pkl")
        discounts.append({"discount": int(discount), "date": datetime.now()})
        save_data("discounts.pkl", discounts)
        messagebox.showinfo("Success", "Discount updated successfully!")

    def export_sales(self):
        orders = load_data("orders.pkl")
        filename = f"ticket_sales_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        try:
            with open(filename, mode='w', newline='') as file:
                writer = csv.writer(file)
                writer.writerow(["Date", "Ticket Type", "Quantity", "Total Price", "Payment Method", "Cardholder"])
                for order in orders:
                    for ttype, qty in order["tickets"].items():
                        writer.writerow([
                            order["date"].strftime("%Y-%m-%d"),
                            ttype,
                            qty,
                            order["total_price"],
                            order["payment_method"],
                            order["cardholder"]
                        ])
            messagebox.showinfo("Export Successful", f"Sales data exported successfully as \"{filename}\"")
        except Exception as e:
            messagebox.showerror("Export Failed", str(e))


if __name__ == "__main__":
    root = tk.Tk()
    app = TicketingSystemApp(root)
    root.mainloop()
